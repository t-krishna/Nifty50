# Load required packages
library(dplyr)
library(data.table)

# Set working directory
setwd("C:/NSE_Stocks")

# Function to combine CSV files for a given dataset
combine_csv_files <- function(file_pattern, stock_name) {
  file_list <- list.files(pattern = file_pattern)
  data_list <- list()
  for (i in 1:length(file_list)) {
    temp_data <- fread(file_list[i], stringsAsFactors = FALSE)
    data_list[[i]] <- temp_data
  }
  combined_data <- rbindlist(data_list, fill = TRUE)
  combined_data$Stock <- stock_name
  return(combined_data)
}

# Combine data for all indices and HDFC Bank
nifty50_data <- combine_csv_files("NIFTY50_.*\\.csv", "NIFTY50")
banknifty_data <- combine_csv_files("BANKNIFTY_.*\\.csv", "BANKNIFTY")
niftyit_data <- combine_csv_files("NIFTYIT_.*\\.csv", "NIFTYIT")
niftyauto_data <- combine_csv_files("NIFTYAUTO_.*\\.csv", "NIFTYAUTO")
niftyfmcg_data <- combine_csv_files("NIFTYFMCG_.*\\.csv", "NIFTYFMCG")
niftymidcap_data <- combine_csv_files("NIFTYMIDCAP_.*\\.csv", "NIFTYMIDCAP150")
niftysmallcap_data <- combine_csv_files("NIFTYSMALLCAP_.*\\.csv", "NIFTYSMALLCAP250")
niftynext50_data <- combine_csv_files("NIFTYNEXT50_.*\\.csv", "NIFTYNEXT50")
hdfcbank_data <- combine_csv_files("HDFCBANK_.*\\.csv", "HDFCBANK")

# Combine all data
all_data <- rbindlist(list(nifty50_data, banknifty_data, niftyit_data, niftyauto_data, niftyfmcg_data, niftymidcap_data, niftysmallcap_data, niftynext50_data, hdfcbank_data), fill = TRUE)

# Standardize column names
all_data <- all_data %>%
  rename(
    Date = `Date`,
    Open = `Open`,
    High = `High`,
    Low = `Low`,
    Close = `Close`,
    Volume = `Turnover`
  ) %>%
  select(Date, Open, High, Low, Close, Volume, Stock)

# Convert Date and clean
all_data$Date <- as.Date(all_data$Date, format = "%d-%b-%Y")
all_data <- all_data %>% 
  filter(!is.na(Close) & !is.na(Date))

# Flag potential data quality issues
all_data <- all_data %>%
  group_by(Stock) %>%
  mutate(
    Date_Diff = as.numeric(difftime(Date, lag(Date), units = "days")),
    Flag_Missing_Days = ifelse(Date_Diff > 5 & !is.na(Date_Diff), 1, 0),
    Flag_Extreme_Close = ifelse(Close > 1.5 * lag(Close) | Close < 0.5 * lag(Close), 1, 0)
  ) %>%
  ungroup()

# Assign sectors and segments
sector_mapping <- data.frame(
  Stock = c("HDFCBANK", "NIFTY50", "BANKNIFTY", "NIFTYIT", "NIFTYAUTO", "NIFTYFMCG", "NIFTYMIDCAP150", "NIFTYSMALLCAP250", "NIFTYNEXT50"),
  Sector = c("Banking", "Index", "Banking", "IT", "Auto", "FMCG", "Midcap", "Smallcap", "NextLargeCap"),
  Segment = c("LargeCap", "LargeCap", "LargeCap", "LargeCap", "LargeCap", "LargeCap", "MidCap", "SmallCap", "NextLargeCap")
)

# Join sector and segment mapping
all_data <- all_data %>% 
  left_join(sector_mapping, by = "Stock")

# Ensure numeric columns
all_data <- all_data %>%
  mutate(
    Open = as.numeric(Open),
    High = as.numeric(High),
    Low = as.numeric(Low),
    Close = as.numeric(Close),
    Volume = as.numeric(Volume)
  )

# Calculate metrics
all_data <- all_data %>%
  arrange(Stock, Date) %>%
  group_by(Stock) %>%
  mutate(
    Previous_Close = lag(Close),
    Daily_Return = (Close - Previous_Close) / Previous_Close * 100,
    Intraday_Volatility = (High - Low) / Open * 100,
    MA_50 = zoo::rollmean(Close, k = 50, fill = NA, align = "right"),
    Cumulative_Return = cumprod(1 + Daily_Return / 100) - 1,
    Max_Drawdown = cummax(Cumulative_Return) - Cumulative_Return
  ) %>%
  ungroup() %>%
  filter(!is.na(Daily_Return))

# Calculate summary metrics by Stock/Sector/Segment
summary_metrics <- all_data %>%
  group_by(Stock, Sector, Segment) %>%
  summarise(
    Avg_Annual_Return = mean(Daily_Return, na.rm = TRUE) * 252 * 100,
    Volatility = sd(Daily_Return, na.rm = TRUE) * sqrt(252) * 100,
    Max_Drawdown = max(Max_Drawdown, na.rm = TRUE) * 100
  ) %>%
  ungroup()

# Event-Based Impact Analysis for three events
# Define event periods (3 months each) and pre-event baselines (3 months prior)
events <- list(
  Demonetization = list(
    event_start = as.Date("2016-11-08"),
    event_end = as.Date("2017-02-08"),
    pre_start = as.Date("2016-08-08"),
    pre_end = as.Date("2016-11-07")
  ),
  ILFS_Crisis = list(
    event_start = as.Date("2018-09-01"),
    event_end = as.Date("2018-12-01"),
    pre_start = as.Date("2018-06-01"),
    pre_end = as.Date("2018-08-31")
  ),
  COVID19_Crash = list(
    event_start = as.Date("2020-03-01"),
    event_end = as.Date("2020-06-01"),
    pre_start = as.Date("2019-12-01"),
    pre_end = as.Date("2020-02-29")
  )
)

# Function to calculate event metrics
calculate_event_metrics <- function(data, event_name, event_dates) {
  pre_data <- data %>%
    filter(Date >= event_dates$pre_start & Date <= event_dates$pre_end) %>%
    group_by(Stock) %>%
    summarise(
      Pre_Volatility = sd(Daily_Return, na.rm = TRUE) * sqrt(252) * 100,
      Pre_Close = last(Close)
    ) %>%
    ungroup()
  
  event_data <- data %>%
    filter(Date >= event_dates$event_start & Date <= event_dates$event_end) %>%
    group_by(Stock) %>%
    summarise(
      Event_Return = (last(Close) / first(Close) - 1) * 100,
      Event_Volatility = sd(Daily_Return, na.rm = TRUE) * sqrt(252) * 100,
      Min_Close = min(Close, na.rm = TRUE)
    ) %>%
    ungroup()
  
  recovery_data <- data %>%
    filter(Date >= event_dates$event_start) %>%
    left_join(pre_data, by = "Stock") %>%
    group_by(Stock) %>%
    filter(Close >= Pre_Close) %>%
    summarise(
      Recovery_Date = first(Date)
    ) %>%
    ungroup()
  
  event_metrics <- pre_data %>%
    left_join(event_data, by = "Stock") %>%
    left_join(recovery_data, by = "Stock") %>%
    mutate(
      Event_Name = event_name,
      Volatility_Spike = Event_Volatility - Pre_Volatility,
      Recovery_Days = as.numeric(difftime(Recovery_Date, event_dates$event_start, units = "days"))
    ) %>%
    select(Stock, Event_Name, Event_Return, Volatility_Spike, Recovery_Days)
  
  return(event_metrics)
}

# Calculate metrics for each event
event_metrics <- rbind(
  calculate_event_metrics(all_data, "Demonetization", events$Demonetization),
  calculate_event_metrics(all_data, "ILFS_Crisis", events$ILFS_Crisis),
  calculate_event_metrics(all_data, "COVID19_Crash", events$COVID19_Crash)
)

# Export data
fwrite(all_data, "C:/NSE_Stocks/Combined_NIFTY50_MultiIndex_Next50_Data_2015.csv", row.names = FALSE)
fwrite(summary_metrics, "C:/NSE_Stocks/Summary_Metrics_Next50_2015.csv", row.names = FALSE)
fwrite(event_metrics, "C:/NSE_Stocks/Event_Impact_Metrics_2015.csv", row.names = FALSE)
